"""
Script de teste para o endpoint OpenAI
Execute ap√≥s iniciar a aplica√ß√£o com: python test_openai.py
"""

import requests
import json

# Configura√ß√£o
BASE_URL = "http://localhost:8000"
API_KEY = "sk-sua-chave-aqui"  # Substitua pela sua chave da OpenAI

def test_health_check():
    """Testa o endpoint de health check"""
    print("üîç Testando health check...")
    response = requests.get(f"{BASE_URL}/openai/health")
    print(f"Status: {response.status_code}")
    print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    print()

def test_simple_chat():
    """Testa uma conversa simples"""
    print("üí¨ Testando chat simples...")
    
    data = {
        "message": "Ol√°! Me diga em uma frase: o que √© FastAPI?",
        "api_key": API_KEY,
        "model": "gpt-3.5-turbo",
        "temperature": 0.7,
        "max_tokens": 100
    }
    
    response = requests.post(f"{BASE_URL}/openai/chat", json=data)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        print(f"Resposta da IA: {result['response']}")
        print(f"Tokens usados: {result['tokens_used']}")
        print(f"Modelo: {result['model']}")
    else:
        print(f"Erro: {response.json()}")
    print()

def test_conversation_with_history():
    """Testa uma conversa com hist√≥rico"""
    print("üîÑ Testando chat com hist√≥rico...")
    
    data = {
        "message": "E quais s√£o suas principais caracter√≠sticas?",
        "api_key": API_KEY,
        "conversation_history": [
            {
                "role": "user",
                "content": "O que √© FastAPI?"
            },
            {
                "role": "assistant",
                "content": "FastAPI √© um framework web moderno e r√°pido para Python."
            }
        ],
        "max_tokens": 150
    }
    
    response = requests.post(f"{BASE_URL}/openai/chat", json=data)
    print(f"Status: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        print(f"Resposta da IA: {result['response']}")
        print(f"Tokens usados: {result['tokens_used']}")
    else:
        print(f"Erro: {response.json()}")
    print()

def test_invalid_api_key():
    """Testa com API key inv√°lida"""
    print("‚ùå Testando API key inv√°lida...")
    
    data = {
        "message": "Teste",
        "api_key": "chave-invalida"
    }
    
    response = requests.post(f"{BASE_URL}/openai/chat", json=data)
    print(f"Status: {response.status_code}")
    print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    print()

def test_empty_message():
    """Testa com mensagem vazia"""
    print("‚ö†Ô∏è Testando mensagem vazia...")
    
    data = {
        "message": "",
        "api_key": API_KEY
    }
    
    response = requests.post(f"{BASE_URL}/openai/chat", json=data)
    print(f"Status: {response.status_code}")
    print(f"Resposta: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
    print()

if __name__ == "__main__":
    print("=" * 60)
    print("ü§ñ TESTE DO ENDPOINT OPENAI GPT-3.5 TURBO")
    print("=" * 60)
    print()
    
    if API_KEY == "sk-sua-chave-aqui":
        print("‚ö†Ô∏è AVISO: Substitua API_KEY pela sua chave real da OpenAI")
        print("Os testes que requerem uma chave v√°lida ir√£o falhar.")
        print()
    
    try:
        # Testa health check (n√£o precisa de API key)
        test_health_check()
        
        # Testa valida√ß√µes (n√£o precisa de API key v√°lida)
        test_invalid_api_key()
        test_empty_message()
        
        # Testes que precisam de API key v√°lida
        if API_KEY != "sk-sua-chave-aqui":
            test_simple_chat()
            test_conversation_with_history()
        else:
            print("‚è≠Ô∏è Pulando testes que requerem API key v√°lida...")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor.")
        print("Certifique-se de que a aplica√ß√£o est√° rodando em http://localhost:8000")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
    
    print()
    print("=" * 60)
    print("‚úÖ TESTES CONCLU√çDOS")
    print("=" * 60)
